pkgname=glibc
pkgver=2.33
pkgrel=1
pkgdesc="GNU C Library"
arch=('x86_64')
url="http://www.gnu.org/software/libc"
license=(GPL LGPL)
options=(!strip staticlibs)
source=(https://ftp.gnu.org/gnu/glibc/glibc-$pkgver.tar.xz
	glibc-2.34-fhs-1.patch
        glibc.install
        sdt-config.h
        sdt.h
        bz27343.patch
        0001-nptl_db-Support-different-libpthread-ld.so-load-orde.patch
        0002-nptl-Check-for-compatible-GDB-in-nptl-tst-pthread-gd.patch
        0003-nptl-Do-not-build-nptl-tst-pthread-gdb-attach-as-PIE.patch)
	
md5sums=('SKIP'
	 'SKIP'
	 'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
	 'SKIP')

install=glibc.install

prepare() {
[[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc 
cd glibc
sed -e '/NOTIFY_REMOVED)/s/)/ \&\& data.attr != NULL)/' \
    -i sysdeps/unix/sysv/linux/mq_notify.c
patch -Np1 -i "$srcdir"/glibc-2.34-fhs-1.patch
patch -p1 -i "$srcdir"/bz27343.patch
patch -p1 -i "$srcdir"/0001-nptl_db-Support-different-libpthread-ld.so-load-orde.patch
patch -p1 -i "$srcdir"/0002-nptl-Check-for-compatible-GDB-in-nptl-tst-pthread-gd.patch
patch -p1 -i "$srcdir"/0003-nptl-Do-not-build-nptl-tst-pthread-gdb-attach-as-PIE.patch

cp ${srcdir}/{sdt.h,sdt-config.h} ${srcdir}/glibc-2.33/include/sys/

}

build() {
mkdir build

unset CPPFLAGS
unset CFLAGS
  local _configure_flags=(
      --prefix=/
      --with-headers=/include
      --enable-add-ons
      --enable-bind-now
      --enable-cet
      --enable-kernel=4.4
      --enable-lock-elision
      --enable-multi-arch
      --enable-stack-protector=strong
      --enable-stackguard-randomization
      --enable-systemtap
      --disable-profile
      --disable-werror
  )

#      --enable-static-pie


  cd "$srcdir/build"

  echo "slibdir=/lib" >> configparms
  echo "rtlddir=/lib" >> configparms
  echo "sbindir=/bin" >> configparms
  echo "rootsbindir=/sbin" >> configparms

  # remove fortify for building libraries
  CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/}

  #
  CFLAGS=${CFLAGS/-fno-plt/}
  CXXFLAGS=${CXXFLAGS/-fno-plt/}
  LDFLAGS=${LDFLAGS/,-z,now/}

  "$srcdir/glibc/configure" \
      --libdir=/lib \
      --libexecdir=/lib \
      ${_configure_flags[@]}

  # build libraries with fortify disabled
  echo "build-programs=no" >> configparms
  make

  # re-enable fortify for programs
  sed -i "/build-programs=/s#no#yes#" configparms

  echo "CC += -D_FORTIFY_SOURCE=2" >> configparms
  echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms
  make



#export CPPFLAGS=
#export CFLAGS=

#CC="gcc -ffile-prefix-map=/tools=/" \
#../configure --prefix=/                           \
#             --disable-werror                     \
#             --enable-kernel=3.2                  \
#             --enable-stack-protector=strong      \
#             --with-headers=/include              \
#             libc_cv_slibdir=/lib

#  echo "slibdir=/lib" >> configparms
#  echo "rtlddir=/lib" >> configparms
#  echo "sbindir=/bin" >> configparms
#  echo "rootsbindir=/bin" >> configparms

  # remove fortify for building libraries
#  CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/}
#  CFLAGS=${CFLAGS/-fno-plt/}
#  CXXFLAGS=${CXXFLAGS/-fno-plt/}
#  LDFLAGS=${LDFLAGS/,-z,now/}

#make
#unset CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/}
#unset CFLAGS=${CFLAGS/-fno-plt/}
}

package() {
  cd build
  make DESTDIR=${pkgdir} install
}
